
@BaseClass = BaseProperties_discount
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// Discount.DiscountGame
//
@PointClass base(BaseProperties_discount) = discount : "This is your game class. This is an entity that is created serverside when the game starts, and is replicated to the client.   You can use this to create things like HUDs and declare which player class to use for spawned players.  Your game needs to be registered (using [Library] here) with the same name  as your game addon. If it isn't then we won't be able to find it."
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// Discount.CaptureArea
//
@SolidClass base(BaseProperties_discount) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= trigger_capture_area : ""
[
	controlpoint(string) : "Control Point" :  : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Discount.ControlPoint
//
@PointClass base(BaseProperties_discount) 
metadata
{
	entity_tool_name = "Control Point"
	entity_tool_group = "Logic"
	entity_tool_tip = "Defines a control point players can capture for their team."
}
= team_control_point : ""
[
	defaultowner(choices) : "Default Owner" : 0 : "" =
	[
		0 : "Unassigned"
		1 : "Spectator"
		2 : "Red"
		3 : "Blue"
	]
	timetocapture(float) : "Time To Capture" : 5 : ""
	index(integer) : "Control Point Index" : 0 : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	output OnRedTeamCaptured(void) : ""
	output OnBlueTeamCaptured(void) : ""
]

//
// Discount.TeamBarrier
//
@SolidClass base(BaseProperties_discount) = func_respawnroomvisualizer : ""
[
	team(choices) : "Team" : 0 : "" =
	[
		0 : "Unassigned"
		1 : "Spectator"
		2 : "Red"
		3 : "Blue"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Discount.TeamSpawnPoint
//
@PointClass base(BaseProperties_discount) editormodel( "models/editor/playerstart.vmdl" ) 
metadata
{
	entity_tool_name = "Team Spawnpoint"
	entity_tool_group = "Player"
	entity_tool_tip = "Defines a point where the player belonging to a team can (re)spawn"
}
= info_player_teamspawn : ""
[
	team(choices) : "Team" : 0 : "" =
	[
		0 : "Unassigned"
		1 : "Spectator"
		2 : "Red"
		3 : "Blue"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

